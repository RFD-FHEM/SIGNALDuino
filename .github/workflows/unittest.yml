name: unittest
on:
  release:
    types: [created, prereleased, published]
  workflow_dispatch: null
  pull_request: null
    
jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: 
          submodules: true

      - uses: lukka/get-cmake@v3.26.1
        with:
          cmakeVersion: "~3.25.0"  # <--= optional, use most recent 3.25.x version

      - name: prepare directory
        working-directory: ./tests
        run:  mkdir -p build
      
      - name: cmake prepareBuild
        working-directory: ./tests/build
        run: cmake -DCMAKE_BUILD_TYPE=Release ..

      - name: cmake build (compile) project
        working-directory: ./tests/build
        run: cmake --build .

      - name: run ctest
        working-directory: ./tests/build
        run: ctest  -V


  deploy:
    needs: unittest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - envName: nano_bootl_new
          - envName: nano_bootl_new_CC1101
          - envName: nano_bootl_old
          - envName: nano_bootl_old_CC1101
          - envName: radino_CC1101
          - envName: wemos_d1_mini_pro_CC1101
          - envName: wemos_d1_mini_pro
          - envName: pro_promini_16MHz
          - envName: pro_promini_16MHz_CC1101
          - envName: pro_promini_8MHz
          - envName: pro_promini_8MHz_CC1101
          - envName: esp32
          - envName: esp32_CC1101
          - envName: esp8266
          - envName: esp8266_CC1101
          - envName: maple_mini_bootl_v1_CC1101
          - envName: maple_mini_bootl_v1

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          submodules: true

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ matrix.envName }}-pio
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
        
      - name: Run PlatformIO and compile sketch
        id: compile_sketch
        run: |
          export COMPILE_OUTPUT=$(pio run -e ${{ matrix.envName }} )
          echo "$COMPILE_OUTPUT"
          echo "fileext=$(test -f .pio/build/${{ matrix.envName }}/SIGNALDuino*.bin && echo "bin" || echo "hex")" >> $GITHUB_OUTPUT
          echo "SKETCHSIZE=$(echo "$COMPILE_OUTPUT" | grep -Po "(^Flash: ).*")" >> $GITHUB_OUTPUT
          echo "GLOBALRAMUSAGE=$(echo "$COMPILE_OUTPUT" | grep -Po "(^RAM: ).*")" >> $GITHUB_OUTPUT

      - name: Get flash and ram usage
        id: compile_sizes
        run: |
          echo  ${{ steps.compile_sketch.outputs.SKETCHSIZE }}
          echo  ${{ steps.compile_sketch.outputs.GLOBALRAMUSAGE }} 

      - name: Find Comment
        if: ${{ github.event.pull_request.number > 0 }}
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: ${{ github.sha }}
      
      - name: Create comment
        if: ${{ github.event.pull_request.number > 0 && steps.fc.outputs.comment-id == 0  && github.event.pull_request.head.repo.fork == false }}

        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Size report for commit: ${{ github.sha }}
            | ENV | Flash | Ram |
            |-------|-------|-----|
            | ${{ matrix.envName }} | ${{ steps.compile_sketch.outputs.SKETCHSIZE }} bytes | ${{ steps.compile_sketch.outputs.GLOBALRAMUSAGE }} |

      - name: Update comment
        if: ${{ github.event.pull_request.number > 0 && steps.fc.outputs.comment-id != 0 && github.event.pull_request.head.repo.fork == false }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
              | ${{ matrix.envName }} | ${{ steps.compile_sketch.outputs.SKETCHSIZE }} bytes | ${{ steps.compile_sketch.outputs.GLOBALRAMUSAGE }} |
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          draft: true
          files: |
            .pio/build/${{ matrix.envName }}/SIGNALduino*.bin
            .pio/build/${{ matrix.envName }}/SIGNALduino*.hex
  

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: SIGNALDuino_${{ matrix.envName }}
          path: |
            .pio/build/${{ matrix.envName }}/SIGNALduino*.bin
            .pio/build/${{ matrix.envName }}/SIGNALduino*.hex
          if-no-files-found: warn
